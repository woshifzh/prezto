#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...
setopt CORRECT
setopt CLOBBER

source ~/.zalias

function activate-python() {
  export WORKON_HOME=$HOME/.virtualenvs
  if [[ -x /usr/local/bin/virtualenvwrapper.sh ]]; then
    source /usr/local/bin/virtualenvwrapper.sh
  elif [[ -x /usr/bin/virtualenvwrapper.sh ]]; then
    source /usr/bin/virtualenvwrapper.sh
  else
    source ~/local/bin/virtualenvwrapper.sh
  fi
  workon python27
}
function activate-rvm() {
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
}
function activate-desk() {
  # Hook for desk activation
  [ -n "$DESK_ENV" ] && source "$DESK_ENV" || true
}
function activate-nvm() {
  export NVM_DIR="/Users/jeoygin/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
}
function activate-sdk() {
  #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
  export SDKMAN_DIR="/Users/jeoygin/.sdkman"
  [[ -s "/Users/jeoygin/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/jeoygin/.sdkman/bin/sdkman-init.sh"
}
function activate-desk() {
  # Hook for desk activation
  [ -n "$DESK_ENV" ] && source "$DESK_ENV"
}
function find-image() {
  [ $# -lt 1 ] && echo "find-image <DIR>" && return -1
  find "$@" -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.png'
}
function random-string() {
  cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-16} | head -n 1
}
function random-number() {
  cat /dev/urandom | tr -dc '0-9' | fold -w ${1:-16} | head -n 1
}
function download_and_extract() {
  local usage="Usage: download_and_extract URL DIR"
  local url="${1:?${usage}}"
  local dir="${2:?${usage}}"
  echo "downloading ${url}" >&2
  mkdir -p "${dir}"
  curl -Ls "${url}" | tar -C "${dir}" --strip-components=1 -xz
}
function pack() {
  local usage="Usage: pack FILES"
  local pack="${1:?${usage}}.tar.gz"
  if [[ $# -gt 1 ]]; then
    pack="pack.tar.gz"
  fi
  echo "packing $@ => $pack" >&2
  tar zcf "$pack" "$@"
}
function packup() {
  [ $# -lt 1 ] && echo "Usage: packup FILES" && return -1
  echo "archiving and uploading $@" >&2
  tar zc "$@" | mupload -o "pack-$( random-string 8 ).tar.gz" -f -
}
function packdown() {
  local usage="Usage: packdow TAR_URL"
  local url="${1:?${usage}}"
  echo "downloading $url" >&2
  curl -L --progress-bar "$1" | tar zx
}
function sample() {
  _n=${1:-10}
  shuf | head -n ${_n}
}
function imgtk-ls() {
  [ $# -lt 1 ] && echo "imgtk-ls <DB>" && return -1
  imgtk -s "$1" -c list
}
function imgtk-save() {
  [ $# -lt 2 ] && echo "imgtk-ls <SRC DB> <DST DB>" && return -1
  imgtk -s "$1" -d "$2" -c save
}
function imgtk-cat() {
  [ $# -lt 1 ] && echo "imgtk-ls <DB>" && return -1
  imgtk -s "$1" -c cat
}
function imgtk-1c() {
  awk '{print $1}' "$@"
}
function imgtk-2c() {
  awk '{print $1"::"$1}' "$@"
}
